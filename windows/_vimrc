
set nocompatible              " be iMproved, required

"

"-------MY SETUP START HERE--------"
"set rnu   "change to relative numbering
set number "this helps in having the current line number still visible when rnu is used
"filetype plugin indent on
set cindent
set shiftwidth=4
set tabstop=4
set incsearch
set ignorecase
set hlsearch
"set ruler
"
""disable arrow keys in normal mode
""noremap <Up> <Nop>
""noremap <Down> <Nop>
""noremap <Left> <Nop>
""noremap <Right> <Nop>
"
"
"" TagList options
"let Tlist_Display_Prototype = 1 "display full prototype instead of just function name
"let Tlist_Exit_OnlyWindow = 1 "if taglist window is the only window left, exit vim
"let Tlist_GainFocus_On_ToggleOpen = 1 "automatically switch to taglist window
"let Tlist_Highlight_Tag_On_BufEnter = 1 "highlight current tag in taglist window
"let Tlist_Process_File_Always = 1 "even without taglist window, create tags file, required for displaying tag in statusline
"let Tlist_Show_Menu = 1 "show Tags menu in gvim
"let Tlist_Show_One_File = 1 "show tags of only one file
"let Tlist_Sort_Type = "name"
"
"" Make vsplit and split open files to the right and below respectively
"set splitright
"set splitbelow
"
"
"" no wrapping of text
"set nowrap
"set textwidth=0
"set wrapmargin=0
"
""no sounds
"set noerrorbells
"set novisualbell
"set t_vb=
"set noeb vb t_vb=
"
"set showmode
"
"set laststatus=2                " tell VIM to always put a status line in, even
"                                "    if there is only one window
"set wildmenu                    " make tab completion for files/buffers act like bash
"set wildmode=list:full          " show a list when pressing tab and complete
"                                "    first full match
"set showcmd                     " show (partial) command in the last line of the screen
"                                "    this also shows visual selection info
"set pastetoggle=<F2>
"set listchars=tab:\|\ ,eol:$,trail:-
"set backspace=indent,eol,start
"set wildmode=longest:full,full
"set colorcolumn=100
"
"set showmatch
"hi MatchParen cterm=underline ctermfg=blue ctermbg=none "Highlight only other matching brace(not both) in red
"
"au BufNewFile,BufRead COMMIT_EDITMSG set spell
"hi clear SpellBad
"hi SpellBad cterm=underline
"hi clear SpellCap
"hi SpellCap cterm=underline
"hi clear SpellRare
"hi SpellRare cterm=underline
"hi clear SpellLocal
"hi SpellLocal cterm=underline

"Correct common mistakes
:command WQ wq
:command Wq wq
:command W w
:command Q q

"nnoremap <silent> <F4> :TlistToggle<CR>
"
"
""Date time
":nnoremap <F5> "=strftime("%c")<CR>P
":inoremap <F5> <C-R>=strftime("%c")<CR>

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

"No swapfiles
set nobackup
set noswapfile
set nowritebackup

